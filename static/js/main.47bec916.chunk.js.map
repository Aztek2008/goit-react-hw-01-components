{"version":3,"sources":["components/Profile/Profile.module.css","components/Statistics/Statistics.module.css","components/FriendList/FriendList.module.css","components/TransactionHistory/TransactionHistory.module.css","components/App/App.module.css","components/Profile/Profile.jsx","components/Statistics/StatLi.jsx","components/Statistics/RandomColor.jsx","components/Statistics/Statistics.jsx","components/FriendList/FriendLi.jsx","components/FriendList/FriendList.jsx","components/TransactionHistory/TransactionHistory.jsx","components/App/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Profile","name","tag","location","avatar","className","s","src","alt","user","stats","followers","likes","views","defaultProps","StatLi","label","percentage","styles","item","style","backgroundColor","Math","floor","random","Statistics","title","isTitle","statistics","statList","map","stat","key","id","FriendLi","isOnline","friendListitem","status","background","width","FriendList","friends","friendList","friend","TransactionHistory","items","transactionHistory","type","amount","currency","App","statisticalData","transactions","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.47bec916.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__nSvvH\",\"description\":\"Profile_description__2pZGr\",\"avatar\":\"Profile_avatar__2dsxW\",\"name\":\"Profile_name__3Mmca\",\"tag\":\"Profile_tag__2KpMq\",\"location\":\"Profile_location__1r-pT\",\"stats\":\"Profile_stats__1075K\",\"statsItem\":\"Profile_statsItem__3gEm0\",\"label\":\"Profile_label__-7Xot\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistics\":\"Statistics_statistics__1qN6p\",\"title\":\"Statistics_title__60n-j\",\"statList\":\"Statistics_statList__332YE\",\"item\":\"Statistics_item__1DQjN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendList\":\"FriendList_friendList__2COO5\",\"friendListitem\":\"FriendList_friendListitem__1PVn3\",\"status\":\"FriendList_status__5i9wa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"transactionHistory\":\"TransactionHistory_transactionHistory__373lt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__23SWz\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport user from \"../../api-json/user.json\";\r\nimport * as s from \"./Profile.module.css\";\r\n\r\nfunction Profile({ name, tag, location, avatar }) {\r\n  return (\r\n    <div className={s.profile}>\r\n      <div className={s.description}>\r\n        <img src={avatar} alt=\"user avatar\" className={s.avatar} />\r\n        <p className={s.name}>{name}</p>\r\n        <p className={s.tag}>@{tag}</p>\r\n        <p className={s.location}>{location}</p>\r\n      </div>\r\n\r\n      <ul className={s.stats}>\r\n        <li className={s.statsItem}>\r\n          <span className={s.label}>Followers</span>\r\n          <span className={s.quantity}>{user.stats.followers}</span>\r\n        </li>\r\n        <li className={s.statsItem}>\r\n          <span className={s.label}>Views</span>\r\n          <span className={s.quantity}>{user.stats.likes}</span>\r\n        </li>\r\n        <li className={s.statsItem}>\r\n          <span className={s.label}>Likes</span>\r\n          <span className={s.quantity}>{user.stats.views}</span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nProfile.defaultProps = {\r\n  avatar:\r\n    \"https://icon-library.net//images/profile-image-icon/profile-image-icon-0.jpg\",\r\n};\r\n\r\nProfile.propTypes = {\r\n  avatar: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  tag: PropTypes.string.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport RandomColor from \"./RandomColor\";\r\nimport styles from \"./Statistics.module.css\";\r\n\r\nconst StatLi = ({ label, percentage }) => (\r\n  <li className={styles.item} style={{ backgroundColor: RandomColor() }}>\r\n    <span className=\"label\">{label}</span>\r\n    <span className=\"percentage\">{percentage}</span>\r\n  </li>\r\n);\r\n\r\nStatLi.propTypes = {\r\n  label: PropTypes.string.isRequired,\r\n  percentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default StatLi;\r\n","export default function randomColor() {\r\n  return `rgb(${Math.floor(Math.random() * 256)}, ${Math.floor(\r\n    Math.random() * 256\r\n  )}, ${Math.floor(Math.random() * 256)})`;\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport StatLi from \"./StatLi\";\r\nimport styles from \"./Statistics.module.css\";\r\n\r\nfunction Statistics({ title, stats }) {\r\n  const isTitle = title;\r\n  return (\r\n    <section className={styles.statistics}>\r\n      {isTitle && <h2 className={styles.title}>{title}</h2>}\r\n\r\n      <ul className={styles.statList}>\r\n        {stats.map((stat) => (\r\n          <StatLi\r\n            key={stat.id}\r\n            label={stat.label}\r\n            percentage={stat.percentage}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </section>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  title: PropTypes.string,\r\n  stats: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      id: PropTypes.string.isRequired,\r\n      label: PropTypes.string.isRequired,\r\n      percentage: PropTypes.number.isRequired,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./FriendList.module.css\";\r\n\r\nconst offlineColor = \"#d16350\";\r\nconst onlineColor = \"#3b9a59\";\r\n\r\nfunction FriendLi({ avatar, name, isOnline }) {\r\n  return (\r\n    <li className={styles.friendListitem}>\r\n      <span\r\n        className={styles.status}\r\n        style={\r\n          isOnline ? { background: onlineColor } : { background: offlineColor }\r\n        }\r\n      ></span>\r\n      <img className=\"avatar\" src={avatar} alt={name} width=\"48\" />\r\n      <p className=\"name\">{name}</p>\r\n    </li>\r\n  );\r\n}\r\n\r\nFriendLi.defaultProps = {\r\n  avatar:\r\n    \"https://icon-library.net//images/profile-image-icon/profile-image-icon-0.jpg\",\r\n};\r\n\r\nFriendLi.propTypes = {\r\n  avatar: PropTypes.string,\r\n  isOnline: PropTypes.bool.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default FriendLi;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport FriendLi from \"./FriendLi\";\r\nimport styles from \"./FriendList.module.css\";\r\n\r\nfunction FriendList({ friends }) {\r\n  return (\r\n    <ul className={styles.friendList}>\r\n      {friends.map((friend) => (\r\n        <FriendLi\r\n          key={friend.id}\r\n          isOnline={friend.isOnline}\r\n          avatar={friend.avatar}\r\n          alt={friend.name}\r\n          width=\"48\"\r\n          name={friend.name}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nFriendList.propTypes = {\r\n  friends: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      avatar: PropTypes.string,\r\n      id: PropTypes.number.isRequired,\r\n      isOnline: PropTypes.bool.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default FriendList;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./TransactionHistory.module.css\";\r\n\r\nfunction TransactionHistory({ items }) {\r\n  return (\r\n    <table className={styles.transactionHistory}>\r\n      <thead>\r\n        <tr>\r\n          <th>Type</th>\r\n          <th>Amount</th>\r\n          <th>Currency</th>\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>\r\n        {items.map((item) => (\r\n          <tr key={item.id}>\r\n            <td>{item.type}</td>\r\n            <td>{item.amount}</td>\r\n            <td>{item.currency}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nTransactionHistory.propTypes = {\r\n  items: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default TransactionHistory;\r\n","import React from \"react\";\nimport \"./App.module.css\";\nimport Profile from \"../Profile/Profile\";\nimport Statistics from \"../Statistics/Statistics\";\nimport FriendList from \"../FriendList/FriendList\";\nimport TransactionHistory from \"../TransactionHistory/TransactionHistory\";\nimport user from \"../../api-json/user.json\";\nimport statisticalData from \"../../api-json/statistical-data.json\";\nimport friends from \"../../api-json/friends.json\";\nimport transactions from \"../../api-json/transactions.json\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Profile\n        name=\"Petra Marica\"\n        tag=\"pmarica\"\n        location=\"Salvador, Brasil\"\n        avatar=\"https://i.pinimg.com/originals/a0/40/66/a04066a2d1fcf25df39c599e093995c8.jpg\"\n        stats={{ user }}\n      />\n\n      <Statistics title=\"Upload stats\" stats={statisticalData} />\n\n      <FriendList friends={friends} />\n      <TransactionHistory items={transactions} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}